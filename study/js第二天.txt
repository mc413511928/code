JS第二天
1，布尔型数据
	1true，在参与加法运算当1，false当0算，
2undefind如果一个变量申明未赋值，结果就是undefind 未定数据类型，和数字相加最后的结果是NaN,

3null空值。和数字相加返回的是原先的数字，他的typeof是object，
4获取数据类型typeof 变量
	1prompt返回的是字符串，
5字面量：
	1一眼看上去，就能知道它是什么类型，
	2蓝色是数字，true是深蓝，布尔he null是浅灰色，通过颜色判断数据类型，
5数据类型转换：
	1toString()   变量.toString()
	2String()强制转换
	3加好拼接字符
6转换为数字类型可以吧字符型转换为数字型，得到的是整数，可以把单位去掉，
	1parseInt(变量)
	2parseFloat（变量）可以吧字符型的转换为数字型，得到的是小时候浮点数，
	3Number(变量)
	4-*/
	5在数字字符串有-*/的时候就被转换成数字型数据了。
	- 注意 parseInt 和 parseFloat 单词的大小写，这2个是重点
	- 隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型
布尔数据类型的转换
	1Boolean(变量)；
	2- 代表空、否定的值会被转换为 false  ，如 ''、0、NaN、null、undefined  ，
	- 其余值都会被转换为 true

运算符
	1浮点数算数运算会有问题的，
	2我们不能直接判断浮点数是否相当，
	3%取余运算符的蛀牙用途，他的余数为0水墨这个数能被整除。
	4运算符有有优先级括号，乘法除法优先，
表达式
	1由数字运算符，变量组成的式子，
	2任何一个表达式都有一个结果，
	3在我们程序里面 2 =1+1，把我们右边的表达式计算完把返回值给到左边，
	4递增递减必须配合变量使用，
	5 ++p先自加1在返回值，
	6p++先返回原值在自加。
	7前置递增和后置递增单独使用效果是一样的，
运算符
	1我们程序里面的等于符号是==默认转换类型，会把字符串转换成数字型
	2不等还!=
	3我们程序里有全等===要求两侧的值，还有数据类型完全一致才可以，
	4大于等于小于等于>=,<=,
	5=是赋值，==是判断两边的值是否相等，===是全等判断两边的 值和数据类型是否完全相同，	
逻辑运算符
	1逻辑&&两侧都为true则为true,只要有一侧有false，则结果是false
	2逻辑||或，只要有一侧是true,结果则为true.
	3逻辑非！
短路逻辑
	1逻辑与短路运算，
		1如果表达式1位真则返回的是表达式2、
		2如果表达式1位假则返回表达式1，
		3如果空的或者否定的为假，，0 ‘’NaN null undefind
		其余为真
	2逻辑或短路运算
		1
赋值运算符：
	1num+=2每次自加2。
	2num*=2每次乘以2
if分支
	1if的语法结构
	2执行思路，如果if里面的 条件结果表达式为真，则执行大括号的执行语句，
	如果条件表达式为假，则不执行大括号的语句，则执行if后面的代码，
	else后面直接跟大括号不跟条件的，
多分支语句
	1多分支语句还是 多选一，最后只有一个语句执行
	2else if里面的条件理论上是可以任意读个的
	3else if中奖有个空格，
三元表达式
	1三元表示是有返回值的？：简化if  else语句，把这个返回值赋值给一个变量，